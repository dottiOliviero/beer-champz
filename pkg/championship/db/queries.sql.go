// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getByID = `-- name: GetByID :one
SELECT id, winnerid, rounds from championship where ID = $1
`

func (q *Queries) GetByID(ctx context.Context, id int32) (Championship, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i Championship
	err := row.Scan(&i.ID, &i.Winnerid, &i.Rounds)
	return i, err
}

const insertChampionship = `-- name: InsertChampionship :one
INSERT INTO championship (rounds) Values ($1) RETURNING id, winnerid, rounds
`

func (q *Queries) InsertChampionship(ctx context.Context, rounds []byte) (Championship, error) {
	row := q.db.QueryRow(ctx, insertChampionship, rounds)
	var i Championship
	err := row.Scan(&i.ID, &i.Winnerid, &i.Rounds)
	return i, err
}

const updateChampionship = `-- name: UpdateChampionship :one
UPDATE championship set winnerID = $2, rounds = $3 where id = $1 RETURNING id, winnerid, rounds
`

type UpdateChampionshipParams struct {
	ID       int32
	Winnerid pgtype.Int4
	Rounds   []byte
}

func (q *Queries) UpdateChampionship(ctx context.Context, arg UpdateChampionshipParams) (Championship, error) {
	row := q.db.QueryRow(ctx, updateChampionship, arg.ID, arg.Winnerid, arg.Rounds)
	var i Championship
	err := row.Scan(&i.ID, &i.Winnerid, &i.Rounds)
	return i, err
}
