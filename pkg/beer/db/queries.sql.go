// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAll = `-- name: GetAll :many
SELECT id, name, style, sub_style, abv, short_desc, brewery, image, score, shop FROM beers order by score DESC, name ASC
`

func (q *Queries) GetAll(ctx context.Context) ([]Beer, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Beer
	for rows.Next() {
		var i Beer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Style,
			&i.SubStyle,
			&i.Abv,
			&i.ShortDesc,
			&i.Brewery,
			&i.Image,
			&i.Score,
			&i.Shop,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBeer = `-- name: InsertBeer :one
INSERT INTO beers (name, style, sub_style, abv, short_desc, brewery, image, score, shop) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id
`

type InsertBeerParams struct {
	Name      pgtype.Text
	Style     pgtype.Text
	SubStyle  pgtype.Text
	Abv       pgtype.Text
	ShortDesc pgtype.Text
	Brewery   pgtype.Text
	Image     pgtype.Text
	Score     pgtype.Int4
	Shop      pgtype.Text
}

func (q *Queries) InsertBeer(ctx context.Context, arg InsertBeerParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertBeer,
		arg.Name,
		arg.Style,
		arg.SubStyle,
		arg.Abv,
		arg.ShortDesc,
		arg.Brewery,
		arg.Image,
		arg.Score,
		arg.Shop,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateBeerScore = `-- name: UpdateBeerScore :one
UPDATE beers SET score = score + 1 where id = $1 RETURNING id, name, style, sub_style, abv, short_desc, brewery, image, score, shop
`

func (q *Queries) UpdateBeerScore(ctx context.Context, id int32) (Beer, error) {
	row := q.db.QueryRow(ctx, updateBeerScore, id)
	var i Beer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Style,
		&i.SubStyle,
		&i.Abv,
		&i.ShortDesc,
		&i.Brewery,
		&i.Image,
		&i.Score,
		&i.Shop,
	)
	return i, err
}
